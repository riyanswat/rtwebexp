// scripts/migrate-from-data.ts
// Run with:
//   BLOB_READ_WRITE_TOKEN="..." npx tsx scripts/migrate-from-data.ts
// or put the token in .env.local and just run:
//   npx tsx scripts/migrate-from-data.ts

import 'dotenv/config';
import { promises as fs } from 'node:fs';
import path from 'node:path';
import { pathToFileURL } from 'node:url';
import { put } from '@vercel/blob';

const PROJECT_ROOT = process.cwd();
const PUBLIC_DIR = path.join(PROJECT_ROOT, 'public');
const DATA_FILE = path.join(PROJECT_ROOT, 'src/components/Shipments/shipmentsData.tsx');

const token = process.env.BLOB_READ_WRITE_TOKEN;

function isLocalRepoImage(url: string) {
  return url.startsWith('/images/');
}

function toAbsoluteLocalPath(localUrl: string) {
  return path.join(PUBLIC_DIR, localUrl.replace(/^\//, ''));
}

function toBlobKey(localUrl: string) {
  return localUrl.replace(/^\/?images\//, '');
}

function guessContentType(p: string) {
  const ext = path.extname(p).toLowerCase();
  if (ext === '.png') return 'image/png';
  if (ext === '.jpg' || ext === '.jpeg') return 'image/jpeg';
  if (ext === '.webp') return 'image/webp';
  return undefined;
}

async function uploadIfLocal(localUrl: string): Promise<string> {
  if (!isLocalRepoImage(localUrl)) return localUrl; // already remote

  const abs = toAbsoluteLocalPath(localUrl);
  const fileBuffer = await fs.readFile(abs);
  const key = toBlobKey(localUrl);

  const { url } = await put(key, fileBuffer, {
    access: 'public',
    contentType: guessContentType(abs),
    token,
    // NEW: avoid "already exists" errors during migration
    allowOverwrite: true,
    // If you prefer unique filenames instead, flip this on and remove allowOverwrite:
    // addRandomSuffix: true,
  });

  return url;
}


async function main() {
  if (!token) {
    console.error('❌ Missing BLOB_READ_WRITE_TOKEN. Add it to .env.local or pass it inline.');
    process.exit(1);
  }

  // Dynamically import your data file (no top-level await)
  const mod = await import(pathToFileURL(DATA_FILE).href);
  const shipmentsData: any[] = mod.default;

  console.log('🚚 Migrating images referenced in shipmentsData.tsx to Vercel Blob...\n');

  const updated = [];
  for (const item of shipmentsData) {
    const newCover = await uploadIfLocal(item.cover);
    const newImages = [];
    for (const img of item.images) {
      newImages.push(await uploadIfLocal(img));
    }
    updated.push({ ...item, cover: newCover, images: newImages });
  }

  const out =
`// ⚠️ Generated by scripts/migrate-from-data.ts
// Replace your shipmentsData.tsx array with this:
${JSON.stringify(updated, null, 2)}`;

  console.log(out);
  console.log('\n✅ Done. Paste the printed array into src/components/Shipments/shipmentsData.tsx.\n');
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
